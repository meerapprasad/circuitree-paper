from pathlib import Path
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns


def main(
    results_summary_csv: Path,
    save_dir: Path,
    plot_batch_size: int = 10,
    skip: int = 100,
    save: bool = False,
    figsize=(8, 6),
    dpi: int = 300,
):
    results_path = Path(results_summary_csv)
    results_df = pd.read_csv(results_path)
    results_df.sort_values(["batch_size", "step"], inplace=True)
    results_skipped = results_df.loc[results_df["step"] % skip == 0]

    opts = dict(
        # data=results_df,
        data=results_skipped,
        x="step",
        hue="batch_size",
        style="batch_size",
        errorbar="se",
        palette=sns.color_palette(n_colors=6),
        # legend=False,
    )
    ax_opts = dict(
        # xlabel="# Samples",
        xlabel="Iterations",
        xscale="log",
        xticks=[1, 100, 10_000, 1_000_000],
    )

    # fig = plt.figure(figsize=figsize)

    # ax = fig.add_subplot(2, 2, 1)
    # plt.ylabel("Oscillators Found")
    # line1 = sns.lineplot(y="n_oscillators", ax=ax, **opts)
    # ax.set(**ax_opts)

    # plt.legend(title="Batch size", bbox_to_anchor=(0.5, 1), loc="lower center", ncol=3)

    # ax = fig.add_subplot(2, 2, 2)
    # plt.ylabel("Top-100 Oscillators found")
    # line2 = sns.lineplot(y="pct_top100", ax=ax, legend=False, **opts)
    # ax.set(**ax_opts)
    # ax.set_yticklabels([f"{y/100:,.0%}" for y in ax.get_yticks()])

    # # ax = fig.add_subplot(2, 2, 3)
    # # plt.ylabel("# Topologies Explored")
    # # line3 = sns.lineplot(y="num_explored", ax=ax, legend=False, **opts)
    # # # plt.ylim(0, 3411)
    # # plt.ylim(1, 5000)
    # # plt.yscale("log")
    # # plt.hlines(3411, 0, 1e6, linestyles="dashed", color="black")
    # # ax.set(**ax_opts)

    # ax = fig.add_subplot(2, 2, 3)
    # plt.ylabel("# Topologies Visited")
    # line3 = sns.lineplot(y="num_visited", ax=ax, legend=False, **opts)
    # plt.ylim(0, 3500)
    # # plt.ylim(1, 5000)
    # # plt.yscale("log")
    # plt.hlines(3411, 0, 1e6, color="gray", lw=1)
    # ax.set(**ax_opts)

    # ax = fig.add_subplot(2, 2, 4)
    # plt.ylabel("Cumulative Regret")
    # line4 = sns.lineplot(y="regret", ax=ax, legend=False, **opts)
    # ax.set(**ax_opts)
    # # plt.xscale("log")
    # plt.yscale("log")
    # # plt.xlim(0.9, 1.1e6)
    # plt.ylim(0.5, None)
    # plt.minorticks_on()

    # sns.despine(fig)

    # plt.tight_layout()

    # if save:
    #     fname = Path(save_dir).joinpath(f"mcts_for_oscillators_all_batchsizes.png")
    #     print(f"Writing to: {fname.resolve().absolute()}")
    #     plt.savefig(fname, dpi=dpi)

    # plt.close()

    # Plot one batch size
    df = results_df.loc[results_df["batch_size"] == plot_batch_size]
    df_skipped = df.loc[df["step"] % skip == 0]
    opts["data"] = df_skipped
    opts["palette"] = sns.color_palette(n_colors=1)
    opts["errorbar"] = "ci"

    fig = plt.figure(figsize=(figsize[0] / 2, figsize[1] * 0.7))

    ax = fig.add_subplot(2, 1, 1)
    plt.ylabel("% Top-100 found")
    line2 = sns.lineplot(y="pct_top100", ax=ax, legend=False, **opts)
    ax.set_xlabel("Iterations")
    ax.ticklabel_format(axis="x", style="sci", scilimits=(0, 0))

    ax = fig.add_subplot(2, 1, 2)
    plt.ylabel("Topologies Visited")
    # opts["data"] = df.loc[df["step"] <= 5e4]
    line3 = sns.lineplot(y="num_visited", ax=ax, legend=False, **opts)
    # plt.xlim(None, 2e4)
    plt.ylim(None, 3500)
    plt.yticks([0, 1500, 3000])
    plt.hlines(3411, *plt.xlim(), color="gray", lw=1, linestyles="dashed")
    ax.set_xlabel("Iterations")
    ax.ticklabel_format(axis="x", style="sci", scilimits=(0, 0))

    sns.despine(fig)
    # plt.suptitle(f"Batch size = {plot_batch_size}")
    plt.tight_layout()

    if save:
        fname = Path(save_dir).joinpath(
            f"mcts_for_oscillators_batchsize{plot_batch_size}.png"
        )
        print(f"Writing to: {fname.resolve().absolute()}")
        plt.savefig(fname, dpi=dpi)

    plt.close()
    ...


if __name__ == "__main__":
    results_summary_csv = Path(
        "data/oscillation/230801_mcts_analysis/230801_search_summary.csv"
    )
    save_dir = Path("figures/oscillation/230725_mcts_bootstrap_boolean")
    save_dir.mkdir(exist_ok=True)

    main(
        results_summary_csv=results_summary_csv,
        save_dir=save_dir,
        save=True,
        plot_batch_size=10,
    )
